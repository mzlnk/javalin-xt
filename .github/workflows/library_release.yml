name: "[library] release"

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to release the library from"
        required: true

jobs:
  validation:
    name: Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Verify that branch matches pattern release/*
        run: |
          if [[ "${{ github.ref }}" != refs/heads/release/* ]]; then
            echo "Error: This workflow must be triggered from a branch matching 'release/*'."
            exit 1
          fi

      - name: Verify user triggering the workflow
        id: verify-user
        run: |
          # Get the triggering user from the environment
          TRIGGERING_USER=${{ github.actor }}
          
          # Read the CODEOWNERS file and check if the user is listed
          if ! grep -Fxq "@$TRIGGERING_USER" CODEOWNERS; then
            echo "Error: User $TRIGGERING_USER is not authorized to trigger the workflow."
            exit 1
          else
            echo "User $TRIGGERING_USER is valid."
          fi

      - name: Verify branch
        id: verify-branch
        run: |
          # Get the branch from the environment
          BRANCH=${{ github.event.inputs.branch }}
          
          # Check if the branch is valid
          if [ "$BRANCH" != "main" ]; then
            echo "Error: Branch $BRANCH is not allowed to trigger the workflow."
            exit 1
          else
            echo "Branch $BRANCH is valid."
          fi

  release:
    name: Release
    needs: validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'adopt'
          cache: gradle

      - name: Publish release
        run: ./gradlew publish
        working-directory: ./library
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
          SIGNING_KEY_ID: ${{ secrets.SIGNING_KEY_ID }}
          SIGNING_PASSWORD: ${{ secrets.SIGNING_PASSWORD }}